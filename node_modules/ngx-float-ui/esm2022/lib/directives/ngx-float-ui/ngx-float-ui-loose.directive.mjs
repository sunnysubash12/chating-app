import { Directive, Inject, Input } from "@angular/core";
import { NGX_FLOAT_UI_DEFAULTS } from "../../models/ngx-float-ui-defaults.model";
import { NgxFloatUiDirective } from "./ngx-float-ui.directive";
import * as i0 from "@angular/core";
export class NgxFloatUiLooseDirective extends NgxFloatUiDirective {
    set floatUiLoose(newValue) {
        this.floatUi = newValue;
    }
    set loosePlacement(newValue) {
        this.placement = newValue;
    }
    set looseTrigger(newValue) {
        this.showTrigger = newValue;
    }
    constructor(changeDetectorRef, elementRef, vcr, popperDefaults = {}) {
        super(changeDetectorRef, elementRef, vcr, popperDefaults);
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: NgxFloatUiLooseDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: NGX_FLOAT_UI_DEFAULTS }], target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.4", type: NgxFloatUiLooseDirective, isStandalone: true, selector: "[floatUiLoose]", inputs: { floatUiLoose: "floatUiLoose", loosePlacement: "loosePlacement", looseTrigger: "looseTrigger" }, exportAs: ["floatUiLoose"], usesInheritance: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: NgxFloatUiLooseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[floatUiLoose]",
                    exportAs: "floatUiLoose",
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_FLOAT_UI_DEFAULTS]
                }] }], propDecorators: { floatUiLoose: [{
                type: Input
            }], loosePlacement: [{
                type: Input
            }], looseTrigger: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZsb2F0LXVpLWxvb3NlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1mbG9hdC11aS9zcmMvbGliL2RpcmVjdGl2ZXMvbmd4LWZsb2F0LXVpL25neC1mbG9hdC11aS1sb29zZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVILFNBQVMsRUFFVCxNQUFNLEVBQ04sS0FBSyxFQUVSLE1BQU0sZUFBZSxDQUFDO0FBSXZCLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLDBDQUEwQyxDQUFDO0FBQy9FLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDOztBQVM3RCxNQUFNLE9BQU8sd0JBQXlCLFNBQVEsbUJBQW1CO0lBRTdELElBQ0ksWUFBWSxDQUFDLFFBQTZDO1FBQzFELElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUNJLGNBQWMsQ0FBQyxRQUFtQztRQUNsRCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQWdDLENBQUM7SUFDdEQsQ0FBQztJQUVELElBQ0ksWUFBWSxDQUFDLFFBQWlDO1FBQzlDLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBOEIsQ0FBQztJQUN0RCxDQUFDO0lBRUQsWUFBWSxpQkFBb0MsRUFDcEMsVUFBc0IsRUFDdEIsR0FBcUIsRUFDVSxpQkFBb0MsRUFBRTtRQUM3RSxLQUFLLENBQUMsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUM5RCxDQUFDOzBIQXRCUSx3QkFBd0IsNkdBb0JiLHFCQUFxQjs4R0FwQmhDLHdCQUF3Qjs7MkZBQXhCLHdCQUF3QjtrQkFMcEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixRQUFRLEVBQUUsY0FBYztvQkFDeEIsVUFBVSxFQUFFLElBQUk7aUJBQ25COzswQkFxQmdCLE1BQU07MkJBQUMscUJBQXFCO3lDQWpCckMsWUFBWTtzQkFEZixLQUFLO2dCQU1GLGNBQWM7c0JBRGpCLEtBQUs7Z0JBTUYsWUFBWTtzQkFEZixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuLy9cbmltcG9ydCB7Tmd4RmxvYXRVaU9wdGlvbnN9IGZyb20gXCIuLi8uLi9tb2RlbHMvbmd4LWZsb2F0LXVpLW9wdGlvbnMubW9kZWxcIjtcbmltcG9ydCB7Tmd4RmxvYXRVaVBsYWNlbWVudHN9IGZyb20gXCIuLi8uLi9tb2RlbHMvbmd4LWZsb2F0LXVpLXBsYWNlbWVudHMubW9kZWxcIjtcbmltcG9ydCB7TkdYX0ZMT0FUX1VJX0RFRkFVTFRTfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1mbG9hdC11aS1kZWZhdWx0cy5tb2RlbFwiO1xuaW1wb3J0IHtOZ3hGbG9hdFVpRGlyZWN0aXZlfSBmcm9tIFwiLi9uZ3gtZmxvYXQtdWkuZGlyZWN0aXZlXCI7XG5pbXBvcnQge05neEZsb2F0VWlDb250ZW50Q29tcG9uZW50fSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9uZ3gtZmxvYXQtdWktY29udGVudC9uZ3gtZmxvYXQtdWktY29udGVudC5jb21wb25lbnRcIjtcbmltcG9ydCB7Tmd4RmxvYXRVaVRyaWdnZXJzfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1mbG9hdC11aS10cmlnZ2Vycy5tb2RlbFwiO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogXCJbZmxvYXRVaUxvb3NlXVwiLFxuICAgIGV4cG9ydEFzOiBcImZsb2F0VWlMb29zZVwiLFxuICAgIHN0YW5kYWxvbmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgTmd4RmxvYXRVaUxvb3NlRGlyZWN0aXZlIGV4dGVuZHMgTmd4RmxvYXRVaURpcmVjdGl2ZSB7XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCBmbG9hdFVpTG9vc2UobmV3VmFsdWU6IHN0cmluZyB8IE5neEZsb2F0VWlDb250ZW50Q29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuZmxvYXRVaSA9IG5ld1ZhbHVlO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IGxvb3NlUGxhY2VtZW50KG5ld1ZhbHVlOiBgJHtOZ3hGbG9hdFVpUGxhY2VtZW50c31gKSB7XG4gICAgICAgIHRoaXMucGxhY2VtZW50ID0gbmV3VmFsdWUgYXMgTmd4RmxvYXRVaVBsYWNlbWVudHM7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBzZXQgbG9vc2VUcmlnZ2VyKG5ld1ZhbHVlOiBgJHtOZ3hGbG9hdFVpVHJpZ2dlcnN9YCkge1xuICAgICAgICB0aGlzLnNob3dUcmlnZ2VyID0gbmV3VmFsdWUgYXMgTmd4RmxvYXRVaVRyaWdnZXJzO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgICAgICAgICBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHZjcjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgICAgICBASW5qZWN0KE5HWF9GTE9BVF9VSV9ERUZBVUxUUykgcG9wcGVyRGVmYXVsdHM6IE5neEZsb2F0VWlPcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoY2hhbmdlRGV0ZWN0b3JSZWYsIGVsZW1lbnRSZWYsIHZjciwgcG9wcGVyRGVmYXVsdHMpO1xuICAgIH1cblxufVxuIl19