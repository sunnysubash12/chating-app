import { Directive, EventEmitter, Inject, Input, Output } from "@angular/core";
//
import { fromEvent, Subject, takeUntil, timer } from "rxjs";
import { NgxFloatUiContentComponent } from "../../components/ngx-float-ui-content/ngx-float-ui-content.component";
import { NGX_FLOAT_UI_DEFAULTS } from "../../models/ngx-float-ui-defaults.model";
import { NgxFloatUiTriggers } from "../../models/ngx-float-ui-triggers.model";
import { NgxFloatUiUtils } from "../../models/ngx-float-ui-utils.class";
import * as i0 from "@angular/core";
export class NgxFloatUiDirective {
    _changeDetectorRef;
    _elementRef;
    _vcr;
    _popperDefaults;
    static baseOptions = {
        showDelay: 0,
        hideOnClickOutside: true,
        hideOnMouseLeave: false,
        hideOnScroll: false,
        appendTo: undefined,
        ariaRole: "popper",
        ariaDescribe: "",
        styles: {},
        trigger: NgxFloatUiTriggers.click
    };
    set applyClass(newValue) {
        if (newValue === this._applyClass) {
            return;
        }
        this._applyClass = newValue;
        this._checkExisting("applyClass", newValue);
    }
    get applyClass() {
        return this._applyClass;
    }
    set arrowClass(newValue) {
        if (newValue === this._arrowClass) {
            return;
        }
        this._arrowClass = newValue;
        if (this._content) {
            this._content.floatUiOptions.applyArrowClass = newValue;
            if (!this._shown) {
                return;
            }
            this._content.update();
        }
    }
    get arrowClass() {
        return this._arrowClass;
    }
    set disabled(newValue) {
        if (newValue === this._disabled) {
            return;
        }
        this._disabled = !!newValue;
        if (this._shown) {
            this.hide();
        }
    }
    get disabled() {
        return this._disabled;
    }
    set floatUi(newValue) {
        if (newValue === this._floatUi) {
            return;
        }
        this._floatUi = newValue;
        if (this._content) {
            if (typeof newValue === "string") {
                this._content.text = newValue;
            }
            else {
                this._content = newValue;
            }
        }
    }
    get floatUi() {
        return this._floatUi;
    }
    set hideOnClickOutside(newValue) {
        this._hideOnClickOutside = NgxFloatUiUtils.coerceBooleanProperty(newValue);
    }
    get hideOnClickOutside() {
        return this._hideOnClickOutside;
    }
    set placement(newValue) {
        this._placement = newValue;
        this._checkExisting("placement", newValue);
    }
    get placement() {
        return this._placement;
    }
    set preventOverflow(newValue) {
        this._preventOverflow = NgxFloatUiUtils.coerceBooleanProperty(newValue);
        this._checkExisting("preventOverflow", this._preventOverflow);
    }
    get preventOverflow() {
        return this._preventOverflow;
    }
    set showOnStart(newValue) {
        this._showOnStart = NgxFloatUiUtils.coerceBooleanProperty(newValue);
    }
    get showOnStart() {
        return this._showOnStart;
    }
    appendTo;
    ariaDescribe;
    ariaRole;
    boundariesElement;
    disableAnimation;
    disableStyle;
    hideOnMouseLeave;
    hideOnScroll;
    hideTimeout = 0;
    onHidden = new EventEmitter();
    onShown = new EventEmitter();
    onUpdate = new EventEmitter();
    positionFixed;
    showDelay;
    showTrigger;
    styles;
    targetElement;
    timeoutAfterShow = 0;
    _applyClass;
    _arrowClass;
    _content;
    _contentClass = NgxFloatUiContentComponent;
    _contentRef;
    _destroy$ = new Subject();
    _disabled;
    _floatUi;
    _globalEventListenersCtrl$ = new Subject();
    _hideOnClickOutside = !0;
    _placement;
    _preventOverflow;
    _scheduledHideTimeoutCtrl$ = new Subject();
    _scheduledShowTimeoutCtrl$ = new Subject();
    _shown = !1;
    _showOnStart = !1;
    constructor(_changeDetectorRef, _elementRef, _vcr, _popperDefaults = {}) {
        this._changeDetectorRef = _changeDetectorRef;
        this._elementRef = _elementRef;
        this._vcr = _vcr;
        this._popperDefaults = _popperDefaults;
        NgxFloatUiDirective.baseOptions = { ...NgxFloatUiDirective.baseOptions, ...this._popperDefaults };
    }
    static assignDefined(target, ...sources) {
        for (const source of sources) {
            for (const key of Object.keys(source)) {
                const val = source[key];
                if (val !== undefined) {
                    target[key] = val;
                }
            }
        }
        return target;
    }
    applyTriggerListeners() {
        switch (this.showTrigger) {
            case NgxFloatUiTriggers.click:
                this._addListener("click", this.toggle.bind(this));
                break;
            case NgxFloatUiTriggers.mousedown:
                this._addListener("mousedown", this.toggle.bind(this));
                break;
            case NgxFloatUiTriggers.hover:
                this._addListener("mouseenter", this.scheduledShow.bind(this, this.showDelay));
                ["touchend", "touchcancel", "mouseleave"].forEach((eventName) => {
                    this._addListener(eventName, this.scheduledHide.bind(this, null, this.hideTimeout));
                });
                break;
        }
        if (this.showTrigger !== NgxFloatUiTriggers.hover && this.hideOnMouseLeave) {
            ["touchend", "touchcancel", "mouseleave"].forEach((eventName) => {
                this._addListener(eventName, this.scheduledHide.bind(this, null, this.hideTimeout));
            });
        }
    }
    getRefElement() {
        return this.targetElement || this._elementRef.nativeElement;
    }
    hide() {
        if (this.disabled) {
            return;
        }
        if (!this._shown) {
            this._scheduledShowTimeoutCtrl$.next();
            return;
        }
        this._shown = false;
        if (this._contentRef) {
            this._contentRef.instance.hide();
        }
        else {
            this._content.hide();
        }
        this.onHidden.emit(this);
        this._globalEventListenersCtrl$.next();
    }
    hideOnClickOutsideHandler($event) {
        if (this.disabled || !this.hideOnClickOutside || $event.target === this._content.elRef.nativeElement ||
            this._content.elRef.nativeElement.contains($event.target)) {
            return;
        }
        this.scheduledHide($event, this.hideTimeout);
    }
    hideOnScrollHandler($event) {
        if (this.disabled || !this.hideOnScroll) {
            return;
        }
        this.scheduledHide($event, this.hideTimeout);
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
        this._content && this._content.clean();
    }
    ngOnInit() {
        if (typeof this.floatUi === "string") {
            this._content = this._constructContent();
            this._content.text = this.floatUi;
        }
        else if (typeof this.floatUi === typeof void 0) {
            this._content = this._constructContent();
            this._content.text = "";
        }
        else {
            this._content = this.floatUi;
        }
        const popperRef = this._content;
        popperRef.referenceObject = this.getRefElement();
        this._setContentProperties(popperRef);
        this._setDefaults();
        this.applyTriggerListeners();
        if (this.showOnStart) {
            this.scheduledShow();
        }
    }
    scheduledHide($event = null, delay = this.hideTimeout) {
        if (this.disabled) {
            return;
        }
        this._scheduledHideTimeoutCtrl$.next();
        timer(delay)
            .pipe(takeUntil(this._scheduledHideTimeoutCtrl$), takeUntil(this._destroy$))
            .subscribe({
            next: () => {
                // TODO: check
                const toElement = $event ? $event.toElement : null;
                const popperContentView = this._content.floatUiViewRef ? this._content.floatUiViewRef.nativeElement : false;
                if (!popperContentView ||
                    popperContentView === toElement ||
                    popperContentView.contains(toElement) ||
                    (this.floatUi && this.floatUi.isMouseOver)) {
                    return;
                }
                this.hide();
                this._applyChanges();
            }
        });
    }
    scheduledShow(delay = this.showDelay) {
        if (this.disabled) {
            return;
        }
        this._scheduledHideTimeoutCtrl$.next();
        timer(delay)
            .pipe(takeUntil(this._scheduledShowTimeoutCtrl$), takeUntil(this._destroy$))
            .subscribe({
            next: () => {
                this.show();
                this._applyChanges();
            }
        });
    }
    show() {
        if (this._shown) {
            this._scheduledHideTimeoutCtrl$.next();
            return;
        }
        this._shown = true;
        const popperRef = this._content;
        const element = this.getRefElement();
        if (popperRef.referenceObject !== element) {
            popperRef.referenceObject = element;
        }
        this._setContentProperties(popperRef);
        popperRef.show();
        this.onShown.emit(this);
        if (this.timeoutAfterShow > 0) {
            this.scheduledHide(null, this.timeoutAfterShow);
        }
        fromEvent(document, "click")
            .pipe(takeUntil(this._globalEventListenersCtrl$), takeUntil(this._destroy$))
            .subscribe({
            next: (e) => this.hideOnClickOutsideHandler(e)
        });
        fromEvent(this._getScrollParent(this.getRefElement()), "scroll")
            .pipe(takeUntil(this._globalEventListenersCtrl$), takeUntil(this._destroy$))
            .subscribe({
            next: (e) => {
                this.hideOnScrollHandler(e);
            }
        });
    }
    toggle() {
        if (this.disabled) {
            return;
        }
        this._shown ? this.scheduledHide(null, this.hideTimeout) : this.scheduledShow();
    }
    _addListener(eventName, cb) {
        fromEvent(this._elementRef.nativeElement, eventName)
            .pipe(takeUntil(this._destroy$))
            .subscribe({
            next: cb
        });
    }
    _applyChanges() {
        this._changeDetectorRef.markForCheck();
        this._changeDetectorRef.detectChanges();
    }
    _checkExisting(key, newValue) {
        if (this._content) {
            this._content.floatUiOptions[key] = newValue;
            if (!this._shown) {
                return;
            }
            this._content.update();
        }
    }
    _constructContent() {
        this._contentRef = this._vcr.createComponent(this._contentClass);
        return this._contentRef.instance;
    }
    _getScrollParent(node) {
        const isElement = node instanceof HTMLElement;
        const overflowY = isElement && window.getComputedStyle(node).overflowY;
        const isScrollable = overflowY !== "visible" && overflowY !== "hidden";
        if (!node) {
            return null;
        }
        else if (isScrollable && node.scrollHeight > node.clientHeight) {
            return node;
        }
        return this._getScrollParent(node.parentNode) || document;
    }
    _onPopperUpdate() {
        this.onUpdate.emit();
    }
    _setContentProperties(popperRef) {
        popperRef.floatUiOptions = NgxFloatUiDirective.assignDefined(popperRef.floatUiOptions, NgxFloatUiDirective.baseOptions, {
            showDelay: this.showDelay,
            disableAnimation: this.disableAnimation,
            disableDefaultStyling: this.disableStyle,
            placement: this.placement,
            boundariesElement: this.boundariesElement,
            trigger: this.showTrigger,
            positionFixed: this.positionFixed,
            ariaDescribe: this.ariaDescribe,
            ariaRole: this.ariaRole,
            applyClass: this.applyClass,
            applyArrowClass: this.arrowClass,
            hideOnMouseLeave: this.hideOnMouseLeave,
            styles: this.styles,
            appendTo: this.appendTo,
            preventOverflow: this.preventOverflow,
        });
        popperRef.onUpdate = this._onPopperUpdate.bind(this);
        popperRef.onHidden
            .pipe(takeUntil(this._destroy$))
            .subscribe(this.hide.bind(this));
    }
    _setDefaults() {
        ["showDelay", "hideOnScroll", "hideOnMouseLeave", "hideOnClickOutside", "ariaRole", "ariaDescribe"].forEach((key) => {
            this[key] = this[key] === void 0 ? NgxFloatUiDirective.baseOptions[key] : this[key];
        });
        this.showTrigger = this.showTrigger || NgxFloatUiDirective.baseOptions.trigger;
        this.styles = this.styles === void 0 ? { ...NgxFloatUiDirective.baseOptions.styles } : this.styles;
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: NgxFloatUiDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: NGX_FLOAT_UI_DEFAULTS }], target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.4", type: NgxFloatUiDirective, isStandalone: true, selector: "[floatUi]", inputs: { applyClass: "applyClass", arrowClass: "arrowClass", disabled: "disabled", floatUi: "floatUi", hideOnClickOutside: "hideOnClickOutside", placement: "placement", preventOverflow: "preventOverflow", showOnStart: "showOnStart", appendTo: "appendTo", ariaDescribe: "ariaDescribe", ariaRole: "ariaRole", boundariesElement: "boundariesElement", disableAnimation: "disableAnimation", disableStyle: "disableStyle", hideOnMouseLeave: "hideOnMouseLeave", hideOnScroll: "hideOnScroll", hideTimeout: "hideTimeout", positionFixed: "positionFixed", showDelay: "showDelay", showTrigger: "showTrigger", styles: "styles", targetElement: "targetElement", timeoutAfterShow: "timeoutAfterShow" }, outputs: { onHidden: "onHidden", onShown: "onShown", onUpdate: "onUpdate" }, exportAs: ["floatUi"], ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: NgxFloatUiDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[floatUi]",
                    exportAs: "floatUi",
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_FLOAT_UI_DEFAULTS]
                }] }], propDecorators: { applyClass: [{
                type: Input
            }], arrowClass: [{
                type: Input
            }], disabled: [{
                type: Input
            }], floatUi: [{
                type: Input
            }], hideOnClickOutside: [{
                type: Input
            }], placement: [{
                type: Input
            }], preventOverflow: [{
                type: Input
            }], showOnStart: [{
                type: Input
            }], appendTo: [{
                type: Input
            }], ariaDescribe: [{
                type: Input
            }], ariaRole: [{
                type: Input
            }], boundariesElement: [{
                type: Input
            }], disableAnimation: [{
                type: Input
            }], disableStyle: [{
                type: Input
            }], hideOnMouseLeave: [{
                type: Input
            }], hideOnScroll: [{
                type: Input
            }], hideTimeout: [{
                type: Input
            }], onHidden: [{
                type: Output
            }], onShown: [{
                type: Output
            }], onUpdate: [{
                type: Output
            }], positionFixed: [{
                type: Input
            }], showDelay: [{
                type: Input
            }], showTrigger: [{
                type: Input
            }], styles: [{
                type: Input
            }], targetElement: [{
                type: Input
            }], timeoutAfterShow: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,