import { NgClass, NgIf, NgStyle } from "@angular/common";
import { ChangeDetectionStrategy, Component, EventEmitter, HostListener, ViewChild, ViewEncapsulation } from "@angular/core";
//
import { arrow, autoPlacement, autoUpdate, computePosition, flip, limitShift, offset, shift } from "@floating-ui/dom";
import { fromEvent, Subject, takeUntil } from "rxjs";
import { NgxFloatUiPlacements } from "../../models/ngx-float-ui-placements.model";
import { NgxFloatUiTriggers } from "../../models/ngx-float-ui-triggers.model";
import * as i0 from "@angular/core";
export class NgxFloatUiContentComponent {
    elRef;
    _viewRef;
    _changeDetectorRef;
    static nextId = 0;
    get _dynamicArrowSides() {
        return {
            top: "left",
            right: "top",
            bottom: "left",
            left: "top"
        };
    }
    get _sideAxis() {
        return {
            left: "x",
            top: "y",
            right: "x",
            bottom: "y"
        };
    }
    get _staticArrowSides() {
        return {
            top: "bottom",
            right: "left",
            bottom: "top",
            left: "right"
        };
    }
    ariaHidden;
    arrowColor = null;
    displayType;
    floatUiOptions = {
        disableAnimation: false,
        disableDefaultStyling: false,
        boundariesElement: "",
        trigger: NgxFloatUiTriggers.hover,
        positionFixed: false,
        appendToBody: false,
        popperModifiers: []
    };
    floatUiSwitch;
    floatUiViewRef;
    id = `ngx_float_ui_${++NgxFloatUiContentComponent.nextId}`;
    isMouseOver = !1;
    onHidden = new EventEmitter();
    onUpdate;
    opacity;
    referenceObject;
    state;
    text;
    _destroy$ = new Subject();
    _resizeCtrl$ = new Subject();
    _styleId = `${this.id}_style`;
    constructor(elRef, _viewRef, _changeDetectorRef) {
        this.elRef = elRef;
        this._viewRef = _viewRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._toggleVisibility(!1);
    }
    clean() {
        this.toggleVisibility(false);
        if (!this.floatUiSwitch) {
            return;
        }
        this.floatUiSwitch();
    }
    extractAppliedClassListExpr(classList = []) {
        const klassList = Array.isArray(classList) ? classList : typeof classList === typeof "" ? classList.replace(/ /, "").split(",") : [];
        return klassList.reduce((acc, klass) => {
            acc[klass] = !0;
            return acc;
        }, {});
    }
    hide() {
        if (this.floatUiSwitch) {
            this.floatUiSwitch();
        }
        this.toggleVisibility(!1);
        this.onHidden.emit();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this.clean();
        if (this.floatUiOptions.appendTo && this.elRef && this.elRef.nativeElement && this.elRef.nativeElement.parentNode) {
            this._viewRef.detach();
            this.elRef.nativeElement.parentNode.removeChild(this.elRef.nativeElement);
        }
    }
    onDocumentResize() {
        this.update();
    }
    onMouseOver() {
        this.isMouseOver = true;
    }
    show() {
        if (!this.referenceObject) {
            return;
        }
        this._resizeCtrl$.next();
        this._determineArrowColor();
        this.floatUiSwitch = autoUpdate(this.referenceObject, this.floatUiViewRef.nativeElement, () => {
            this._computePosition();
        });
        fromEvent(document, "resize")
            .pipe(takeUntil(this._resizeCtrl$), takeUntil(this._destroy$))
            .subscribe({
            next: () => this.onDocumentResize()
        });
    }
    showOnLeave() {
        this.isMouseOver = false;
        if (this.floatUiOptions.trigger !== NgxFloatUiTriggers.hover && !this.floatUiOptions.hideOnMouseLeave) {
            return;
        }
        this.hide();
    }
    // Toggle visibility and detect changes - Run only after ngOnInit!
    toggleVisibility(state) {
        this._toggleVisibility(state);
        // tslint:disable-next-line:no-string-literal
        if (!this._changeDetectorRef["destroyed"]) {
            this._changeDetectorRef.detectChanges();
        }
    }
    update() {
        this._computePosition();
    }
    _computePosition() {
        const appendToParent = this.floatUiOptions.appendTo && document.querySelector(this.floatUiOptions.appendTo);
        if (appendToParent) {
            const parent = this.elRef.nativeElement.parentNode;
            if (parent !== appendToParent) {
                parent && parent.removeChild(this.elRef.nativeElement);
                appendToParent.appendChild(this.elRef.nativeElement);
            }
        }
        const arrowElement = this.elRef.nativeElement.querySelector(".float-ui-arrow");
        const arrowLen = arrowElement.offsetWidth;
        // Get half the arrow box's hypotenuse length
        const floatingOffset = Math.sqrt(2 * arrowLen ** 2) / 2;
        const parsedAutoAlignment = (this.floatUiOptions.placement?.replace("auto-", "") || void 0);
        // Since "auto" doesn't really exist in floating-ui we pass undefined to have auto
        const parsedPlacement = !this.floatUiOptions.placement || this.floatUiOptions.placement.indexOf(NgxFloatUiPlacements.AUTO) === 0
            ? void 0
            : this.floatUiOptions.placement;
        const popperOptions = {
            placement: parsedPlacement,
            strategy: this.floatUiOptions.positionFixed ? "fixed" : "absolute",
            middleware: [
                offset(floatingOffset),
                ...(this.floatUiOptions.preventOverflow
                    ? [flip()]
                    : []),
                shift({ limiter: limitShift() }),
                arrow({
                    element: arrowElement,
                    padding: 4
                })
            ]
        };
        // Since preventOverflow uses "flip" and "flip" can't be used with "autoPlacement" we get here only if both conditions are falsy
        if (!this.floatUiOptions.preventOverflow && !popperOptions.placement) {
            const boundariesElement = this.floatUiOptions.boundariesElement
                ? document.querySelector(this.floatUiOptions.boundariesElement)
                : this.referenceObject.parentElement;
            popperOptions.middleware.push(autoPlacement({
                crossAxis: !0,
                alignment: parsedAutoAlignment,
                autoAlignment: this.floatUiOptions.placement === NgxFloatUiPlacements.AUTO,
                boundary: boundariesElement
            }));
        }
        computePosition(this.referenceObject, this.floatUiViewRef.nativeElement, {
            ...popperOptions
        })
            .then(({ middlewareData, x, y, placement }) => {
            const side = placement.split("-")[0];
            this.floatUiViewRef.nativeElement.setAttribute("data-float-ui-placement", side);
            if (middlewareData.arrow) {
                const staticArrowSide = this._staticArrowSides[side];
                const dynamicArrowSide = this._dynamicArrowSides[side];
                const dynamicSideAxis = this._sideAxis[dynamicArrowSide];
                Object.assign(arrowElement.style, {
                    top: "",
                    bottom: "",
                    left: "",
                    right: "",
                    [dynamicArrowSide]: middlewareData.arrow[dynamicSideAxis] != null ? `${middlewareData.arrow[dynamicSideAxis]}px` : "",
                    [staticArrowSide]: `${-arrowLen / 2}px`
                });
            }
            Object.assign(this.floatUiViewRef.nativeElement.style, {
                left: `${x}px`,
                top: `${y}px`
            });
            this.toggleVisibility(!0);
            this.onUpdate?.();
        });
    }
    _createArrowSelector() {
        return `div#${this.id}.float-ui-container > .float-ui-arrow.ngxp__force-arrow`;
    }
    _determineArrowColor() {
        if (!this.floatUiOptions.styles || this.arrowColor) {
            return !1;
        }
        const ruleValue = this.floatUiOptions.styles["background-color"] || this.floatUiOptions.styles.backgroundColor;
        if (this.arrowColor === ruleValue) {
            return !1;
        }
        this.arrowColor = ruleValue;
        let $style = document.querySelector(`#${this._styleId}`);
        const styleContent = this.arrowColor ?
            `${this._createArrowSelector()}:before { background-color: ${this.arrowColor}; }` : "";
        if (!$style) {
            $style = document.createElement("style");
            $style.id = this._styleId;
            $style.setAttribute("type", "text/css");
            document.head.appendChild($style);
        }
        // tslint:disable-next-line:no-string-literal
        if ($style["styleSheet"]) {
            // tslint:disable-next-line:no-string-literal
            $style["styleSheet"].cssText = styleContent;
            // This is required for IE8 and below.
        }
        else {
            $style.innerHTML = styleContent;
        }
    }
    _toggleVisibility(state) {
        this.displayType = ["none", "block"][+state];
        this.opacity = +state;
        this.ariaHidden = `${!state}`;
        this.state = state;
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: NgxFloatUiContentComponent, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.4", type: NgxFloatUiContentComponent, isStandalone: true, selector: "float-ui-content", host: { listeners: { "mouseover": "onMouseOver()", "mouseleave": "showOnLeave()" } }, viewQueries: [{ propertyName: "floatUiViewRef", first: true, predicate: ["floatUiViewRef"], descendants: true, static: true }], exportAs: ["ngxFloatUiContent"], ngImport: i0, template: "<div #floatUiViewRef\n     [attr.id]=\"id\"\n     [class.float-ui-container]=\"!floatUiOptions.disableDefaultStyling\"\n     [class.float-ui-animation]=\"!floatUiOptions.disableAnimation\"\n     [class.float-ui-fixed]=\"floatUiOptions.positionFixed\"\n     [style.display]=\"displayType\"\n     [style.opacity]=\"opacity\"\n     [ngStyle]=\"floatUiOptions.styles\"\n     [ngClass]=\"extractAppliedClassListExpr(floatUiOptions.applyClass)\"\n     attr.aria-hidden=\"{{ariaHidden}}\"\n     [attr.aria-describedby]=\"floatUiOptions.ariaDescribe || null\"\n     attr.role=\"{{floatUiOptions.ariaRole}}\">\n    <div *ngIf=\"text\"\n         class=\"ngxp__inner\"\n         [innerHTML]=\"text\">\n        <ng-content></ng-content>\n    </div>\n    <div *ngIf=\"!text\"\n         class=\"ngxp__inner\">\n        <ng-content></ng-content>\n    </div>\n    <div class=\"float-ui-arrow\"\n         [class.ngxp__force-arrow]=\"arrowColor\"\n         [ngClass]=\"extractAppliedClassListExpr(floatUiOptions.applyArrowClass)\"></div>\n\n</div>\n", styles: ["float-ui-content{position:relative;display:block}.float-ui-container{display:none;position:absolute;border-radius:3px;border:1px solid grey;box-shadow:0 0 2px #00000080;padding:10px}.float-ui-container.float-ui-fixed{position:fixed}.float-ui-container.float-ui-animation{-webkit-animation:ngxp-fadeIn .15s ease-out;-moz-animation:ngxp-fadeIn .15s ease-out;-o-animation:ngxp-fadeIn .15s ease-out;animation:ngxp-fadeIn .15s ease-out;transition:transform .65s cubic-bezier(.43,.33,.14,1.01) 0s}.float-ui-container>.float-ui-arrow{position:absolute;width:10px;height:10px;z-index:-1;-webkit-transform:rotate(45deg);-ms-transform:rotate(45deg);transform:rotate(45deg)}@-webkit-keyframes ngxp-fadeIn{0%{display:none;opacity:0}1%{display:block;opacity:0}to{display:block;opacity:1}}@keyframes ngxp-fadeIn{0%{display:none;opacity:0}1%{display:block;opacity:0}to{display:block;opacity:1}}\n"], dependencies: [{ kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: NgxFloatUiContentComponent, decorators: [{
            type: Component,
            args: [{ selector: "float-ui-content", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: "ngxFloatUiContent", standalone: true, imports: [NgStyle, NgClass, NgIf], template: "<div #floatUiViewRef\n     [attr.id]=\"id\"\n     [class.float-ui-container]=\"!floatUiOptions.disableDefaultStyling\"\n     [class.float-ui-animation]=\"!floatUiOptions.disableAnimation\"\n     [class.float-ui-fixed]=\"floatUiOptions.positionFixed\"\n     [style.display]=\"displayType\"\n     [style.opacity]=\"opacity\"\n     [ngStyle]=\"floatUiOptions.styles\"\n     [ngClass]=\"extractAppliedClassListExpr(floatUiOptions.applyClass)\"\n     attr.aria-hidden=\"{{ariaHidden}}\"\n     [attr.aria-describedby]=\"floatUiOptions.ariaDescribe || null\"\n     attr.role=\"{{floatUiOptions.ariaRole}}\">\n    <div *ngIf=\"text\"\n         class=\"ngxp__inner\"\n         [innerHTML]=\"text\">\n        <ng-content></ng-content>\n    </div>\n    <div *ngIf=\"!text\"\n         class=\"ngxp__inner\">\n        <ng-content></ng-content>\n    </div>\n    <div class=\"float-ui-arrow\"\n         [class.ngxp__force-arrow]=\"arrowColor\"\n         [ngClass]=\"extractAppliedClassListExpr(floatUiOptions.applyArrowClass)\"></div>\n\n</div>\n", styles: ["float-ui-content{position:relative;display:block}.float-ui-container{display:none;position:absolute;border-radius:3px;border:1px solid grey;box-shadow:0 0 2px #00000080;padding:10px}.float-ui-container.float-ui-fixed{position:fixed}.float-ui-container.float-ui-animation{-webkit-animation:ngxp-fadeIn .15s ease-out;-moz-animation:ngxp-fadeIn .15s ease-out;-o-animation:ngxp-fadeIn .15s ease-out;animation:ngxp-fadeIn .15s ease-out;transition:transform .65s cubic-bezier(.43,.33,.14,1.01) 0s}.float-ui-container>.float-ui-arrow{position:absolute;width:10px;height:10px;z-index:-1;-webkit-transform:rotate(45deg);-ms-transform:rotate(45deg);transform:rotate(45deg)}@-webkit-keyframes ngxp-fadeIn{0%{display:none;opacity:0}1%{display:block;opacity:0}to{display:block;opacity:1}}@keyframes ngxp-fadeIn{0%{display:none;opacity:0}1%{display:block;opacity:0}to{display:block;opacity:1}}\n"] }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }], propDecorators: { floatUiViewRef: [{
                type: ViewChild,
                args: ["floatUiViewRef", { static: !0 }]
            }], onMouseOver: [{
                type: HostListener,
                args: ["mouseover"]
            }], showOnLeave: [{
                type: HostListener,
                args: ["mouseleave"]
            }] } });
//# sourceMappingURL=data:application/json;base64,