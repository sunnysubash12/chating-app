import { Injectable, NgModule } from '@angular/core';
import { isSafari } from '../is-safari';
import { MultimediaRecorder } from './media-recorder';
import { resampleWaveForm } from '../wave-form-sampler';
import * as i0 from "@angular/core";
import * as i1 from "../notification.service";
import * as i2 from "../chat-client.service";
import * as i3 from "./transcoder.service";
import * as i4 from "./amplitude-recorder.service";
/**
 * The `AudioRecorderService` can record an audio file, the SDK uses this to record a voice message
 */
export class AudioRecorderService extends MultimediaRecorder {
    constructor(notificationService, chatService, transcoder, amplitudeRecorder) {
        super(notificationService, chatService, transcoder);
        this.amplitudeRecorder = amplitudeRecorder;
        /**
         * Due to browser restrictions the following config is used:
         * - In Safari we record in audio/mp4
         * - For all other browsers we use audio/webm (which is then transcoded to wav)
         */
        this.config = {
            mimeType: isSafari() ? 'audio/mp4;codecs=mp4a.40.2' : 'audio/webm',
        };
    }
    enrichWithExtraData() {
        const waveformData = resampleWaveForm(this.amplitudeRecorder.amplitudes, this.amplitudeRecorder.config.sampleCount);
        return { waveform_data: waveformData };
    }
    /**
     * Start audio recording
     */
    async start() {
        const result = await super.start();
        if (this.mediaRecorder?.stream) {
            this.amplitudeRecorder.start(this.mediaRecorder?.stream);
        }
        return result;
    }
    /**
     * Pause audio recording, it can be restarted using `resume`
     */
    pause() {
        const result = super.pause();
        this.amplitudeRecorder.pause();
        return result;
    }
    /**
     * Resume a previously paused recording
     */
    resume() {
        const result = super.resume();
        this.amplitudeRecorder.resume();
        return result;
    }
    /**
     * Stop the recording and free up used resources
     * @param options
     * @param options.cancel if this is `true` no recording will be created, but resources will be freed
     * @returns the recording
     */
    async stop(options) {
        try {
            const result = await super.stop(options);
            return result;
        }
        finally {
            this.amplitudeRecorder.stop();
        }
    }
}
AudioRecorderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AudioRecorderService, deps: [{ token: i1.NotificationService }, { token: i2.ChatClientService }, { token: i3.TranscoderService }, { token: i4.AmplitudeRecorderService }], target: i0.ɵɵFactoryTarget.Injectable });
AudioRecorderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AudioRecorderService, providedIn: NgModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AudioRecorderService, decorators: [{
            type: Injectable,
            args: [{ providedIn: NgModule }]
        }], ctorParameters: function () { return [{ type: i1.NotificationService }, { type: i2.ChatClientService }, { type: i3.TranscoderService }, { type: i4.AmplitudeRecorderService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVkaW8tcmVjb3JkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi92b2ljZS1yZWNvcmRlci9hdWRpby1yZWNvcmRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDeEMsT0FBTyxFQUF1QixrQkFBa0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBSTNFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7Ozs7QUFHeEQ7O0dBRUc7QUFFSCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsa0JBRXpDO0lBVUMsWUFDRSxtQkFBd0MsRUFDeEMsV0FBOEIsRUFDOUIsVUFBNkIsRUFDckIsaUJBQTJDO1FBRW5ELEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFGNUMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQWJyRDs7OztXQUlHO1FBQ0gsV0FBTSxHQUF3QjtZQUM1QixRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQyxZQUFZO1NBQ25FLENBQUM7SUFTRixDQUFDO0lBRVMsbUJBQW1CO1FBQzNCLE1BQU0sWUFBWSxHQUFHLGdCQUFnQixDQUNuQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxFQUNqQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FDMUMsQ0FBQztRQUVGLE9BQU8sRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLEtBQUs7UUFDVCxNQUFNLE1BQU0sR0FBRyxNQUFNLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVuQyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFO1lBQzlCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUMxRDtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUs7UUFDSCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFN0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFDO1FBRS9CLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU07UUFDSixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFOUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWhDLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBNkI7UUFDdEMsSUFBSTtZQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUV6QyxPQUFPLE1BQU0sQ0FBQztTQUNmO2dCQUFTO1lBQ1IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO1NBQy9CO0lBQ0gsQ0FBQzs7aUhBL0VVLG9CQUFvQjtxSEFBcEIsb0JBQW9CLGNBRFAsUUFBUTsyRkFDckIsb0JBQW9CO2tCQURoQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbXBsaXR1ZGVSZWNvcmRlclNlcnZpY2UgfSBmcm9tICcuL2FtcGxpdHVkZS1yZWNvcmRlci5zZXJ2aWNlJztcbmltcG9ydCB7IGlzU2FmYXJpIH0gZnJvbSAnLi4vaXMtc2FmYXJpJztcbmltcG9ydCB7IE1lZGlhUmVjb3JkZXJDb25maWcsIE11bHRpbWVkaWFSZWNvcmRlciB9IGZyb20gJy4vbWVkaWEtcmVjb3JkZXInO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4uL25vdGlmaWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IENoYXRDbGllbnRTZXJ2aWNlIH0gZnJvbSAnLi4vY2hhdC1jbGllbnQuc2VydmljZSc7XG5pbXBvcnQgeyBUcmFuc2NvZGVyU2VydmljZSB9IGZyb20gJy4vdHJhbnNjb2Rlci5zZXJ2aWNlJztcbmltcG9ydCB7IHJlc2FtcGxlV2F2ZUZvcm0gfSBmcm9tICcuLi93YXZlLWZvcm0tc2FtcGxlcic7XG5pbXBvcnQgeyBBdWRpb1JlY29yZGluZywgTWVkaWFSZWNvcmRpbmcgfSBmcm9tICcuLi90eXBlcyc7XG5cbi8qKlxuICogVGhlIGBBdWRpb1JlY29yZGVyU2VydmljZWAgY2FuIHJlY29yZCBhbiBhdWRpbyBmaWxlLCB0aGUgU0RLIHVzZXMgdGhpcyB0byByZWNvcmQgYSB2b2ljZSBtZXNzYWdlXG4gKi9cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogTmdNb2R1bGUgfSlcbmV4cG9ydCBjbGFzcyBBdWRpb1JlY29yZGVyU2VydmljZSBleHRlbmRzIE11bHRpbWVkaWFSZWNvcmRlcjxcbiAgT21pdDxBdWRpb1JlY29yZGluZywga2V5b2YgTWVkaWFSZWNvcmRpbmc+XG4+IHtcbiAgLyoqXG4gICAqIER1ZSB0byBicm93c2VyIHJlc3RyaWN0aW9ucyB0aGUgZm9sbG93aW5nIGNvbmZpZyBpcyB1c2VkOlxuICAgKiAtIEluIFNhZmFyaSB3ZSByZWNvcmQgaW4gYXVkaW8vbXA0XG4gICAqIC0gRm9yIGFsbCBvdGhlciBicm93c2VycyB3ZSB1c2UgYXVkaW8vd2VibSAod2hpY2ggaXMgdGhlbiB0cmFuc2NvZGVkIHRvIHdhdilcbiAgICovXG4gIGNvbmZpZzogTWVkaWFSZWNvcmRlckNvbmZpZyA9IHtcbiAgICBtaW1lVHlwZTogaXNTYWZhcmkoKSA/ICdhdWRpby9tcDQ7Y29kZWNzPW1wNGEuNDAuMicgOiAnYXVkaW8vd2VibScsXG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgbm90aWZpY2F0aW9uU2VydmljZTogTm90aWZpY2F0aW9uU2VydmljZSxcbiAgICBjaGF0U2VydmljZTogQ2hhdENsaWVudFNlcnZpY2UsXG4gICAgdHJhbnNjb2RlcjogVHJhbnNjb2RlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhbXBsaXR1ZGVSZWNvcmRlcjogQW1wbGl0dWRlUmVjb3JkZXJTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKG5vdGlmaWNhdGlvblNlcnZpY2UsIGNoYXRTZXJ2aWNlLCB0cmFuc2NvZGVyKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBlbnJpY2hXaXRoRXh0cmFEYXRhKCkge1xuICAgIGNvbnN0IHdhdmVmb3JtRGF0YSA9IHJlc2FtcGxlV2F2ZUZvcm0oXG4gICAgICB0aGlzLmFtcGxpdHVkZVJlY29yZGVyLmFtcGxpdHVkZXMsXG4gICAgICB0aGlzLmFtcGxpdHVkZVJlY29yZGVyLmNvbmZpZy5zYW1wbGVDb3VudFxuICAgICk7XG5cbiAgICByZXR1cm4geyB3YXZlZm9ybV9kYXRhOiB3YXZlZm9ybURhdGEgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCBhdWRpbyByZWNvcmRpbmdcbiAgICovXG4gIGFzeW5jIHN0YXJ0KCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1cGVyLnN0YXJ0KCk7XG5cbiAgICBpZiAodGhpcy5tZWRpYVJlY29yZGVyPy5zdHJlYW0pIHtcbiAgICAgIHRoaXMuYW1wbGl0dWRlUmVjb3JkZXIuc3RhcnQodGhpcy5tZWRpYVJlY29yZGVyPy5zdHJlYW0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUGF1c2UgYXVkaW8gcmVjb3JkaW5nLCBpdCBjYW4gYmUgcmVzdGFydGVkIHVzaW5nIGByZXN1bWVgXG4gICAqL1xuICBwYXVzZSgpIHtcbiAgICBjb25zdCByZXN1bHQgPSBzdXBlci5wYXVzZSgpO1xuXG4gICAgdGhpcy5hbXBsaXR1ZGVSZWNvcmRlci5wYXVzZSgpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN1bWUgYSBwcmV2aW91c2x5IHBhdXNlZCByZWNvcmRpbmdcbiAgICovXG4gIHJlc3VtZSgpIHtcbiAgICBjb25zdCByZXN1bHQgPSBzdXBlci5yZXN1bWUoKTtcblxuICAgIHRoaXMuYW1wbGl0dWRlUmVjb3JkZXIucmVzdW1lKCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgdGhlIHJlY29yZGluZyBhbmQgZnJlZSB1cCB1c2VkIHJlc291cmNlc1xuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKiBAcGFyYW0gb3B0aW9ucy5jYW5jZWwgaWYgdGhpcyBpcyBgdHJ1ZWAgbm8gcmVjb3JkaW5nIHdpbGwgYmUgY3JlYXRlZCwgYnV0IHJlc291cmNlcyB3aWxsIGJlIGZyZWVkXG4gICAqIEByZXR1cm5zIHRoZSByZWNvcmRpbmdcbiAgICovXG4gIGFzeW5jIHN0b3Aob3B0aW9ucz86IHsgY2FuY2VsOiBib29sZWFuIH0pIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXIuc3RvcChvcHRpb25zKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5hbXBsaXR1ZGVSZWNvcmRlci5zdG9wKCk7XG4gICAgfVxuICB9XG59XG4iXX0=